name: Run One_new.py on VM

on:
  workflow_dispatch:
    inputs:
      wait_seconds:
        description: "Esperar X segundos antes de cerrar (0 = no esperar)"
        required: false
        default: "5"

defaults:
  run:
    shell: powershell   # usamos Windows PowerShell (no pwsh)

jobs:
  run-on-vm:
    runs-on: [self-hosted, windows, gui]
    timeout-minutes: 60

    steps:
      - name: Info de entorno
        run: |
          Write-Output "VM: $env:procesadorvm  Usuario: $env:Mariano"

      - name: Resolver Python y exportar a GITHUB_ENV
        run: |
          # 1) Intentar con el launcher 'py'
          $py = (Get-Command py.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $py) {
            # 2) Intentar rutas típicas (ajustá si usás otra versión)
            $candidatos = @(
              "C:\Python311\python.exe",
              "C:\Program Files\Python311\python.exe",
              "C:\Users\Mariano\AppData\Local\Programs\Python\Python311\python.exe"
            )
            $py = ($candidatos | Where-Object { Test-Path $_ } | Select-Object -First 1)
          }
          if (-not $py) {
            Write-Error "No se encontró Python. Instalalo o ajustá la ruta en este paso."; exit 1
          }

          # Normalizar a python.exe si encontramos 'py.exe'
          if ($py.ToLower().EndsWith("py.exe")) {
            $py = "py.exe"
          }

          & $py -V
          "PY_PATH=$py" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ejecutar One_new.py (interactivo en tu sesión)
        run: |
          $script = "C:\Users\Mariano\Documents\DMV Automation - 10 Jun V2\One_new.py"
          if (-not (Test-Path $script)) {
            Write-Error "No existe el script en: $script"; exit 1
          }
          $workdir = Split-Path $script

          # Si usás el launcher 'py', armamos argumentos distintos
          if ($env:PY_PATH -eq "py.exe") {
            Start-Process -FilePath "py.exe" -ArgumentList @("-3.11","`"$script`"") -WorkingDirectory $workdir
          } else {
            Start-Process -FilePath $env:PY_PATH -ArgumentList @("`"$script`"") -WorkingDirectory $workdir
          }

          $wait = [int]"${{ github.event.inputs.wait_seconds }}"
          if ($wait -gt 0) {
            Write-Output "Esperando $wait s para dejar que el proceso haga su trabajo..."
            Start-Sleep -Seconds $wait
          }

      # (Opcional) Cerrar python si dejaste wait_seconds > 0 y querés limpieza
      # - name: Cerrar python
      #   if: ${{ github.event.inputs.wait_seconds != '0' }}
      #   run: |
      #     Get-Process python,py -ErrorAction SilentlyContinue | Stop-Process -Force

      # (Opcional) Subir salidas/logs si tu script los genera
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: outputs
      #     path: C:\Temp\Outputs\**\*
      #     if-no-files-found: ignore
